FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat python3 make g++
WORKDIR /app

# Configure npm for better network handling and use minimal package.json
RUN npm config set fetch-timeout 600000 && \
    npm config set fetch-retry-mintimeout 20000 && \
    npm config set fetch-retry-maxtimeout 120000 && \
    npm config set fetch-retries 10 && \
    npm config set registry https://registry.npmjs.org/ && \
    npm config set maxsockets 1

# Use minimal package.json to reduce dependencies
COPY package.minimal.json ./package.json
COPY package-lock.json* ./

# Install only production dependencies first (lighter)
RUN npm ci --only=production --no-audit --no-fund --prefer-offline && \
    npm cache clean --force

# Install dev dependencies separately with longer timeout  
RUN npm ci --no-audit --no-fund --prefer-offline && \
    npm cache clean --force

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Environment variables for build
ARG VITE_API_BASE
ARG VITE_KEYCLOAK_URL
ARG VITE_KEYCLOAK_REALM
ARG VITE_KEYCLOAK_CLIENT_ID

ENV VITE_API_BASE=$VITE_API_BASE
ENV VITE_KEYCLOAK_URL=$VITE_KEYCLOAK_URL
ENV VITE_KEYCLOAK_REALM=$VITE_KEYCLOAK_REALM
ENV VITE_KEYCLOAK_CLIENT_ID=$VITE_KEYCLOAK_CLIENT_ID

# Use minimal package.json for build too
RUN cp package.minimal.json package.json

# Build the application
RUN npm run build

# Production image, serve with nginx
FROM nginx:alpine AS runner
WORKDIR /app

# Copy built assets
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

EXPOSE 5173

CMD ["nginx", "-g", "daemon off;"]